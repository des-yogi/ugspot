(function(){
  const swiperStepForm = new Swiper('.step-form__container', {
    speed: 400,
    slidesPerView: 1,
    allowTouchMove: false,
    autoHeight: true,
    navigation: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Swiper
    on: {
      slideChange: updateProgress // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞
    }
  });

  const prevButton = document.querySelector('.step-form__btn--prev');
  const nextButton = document.querySelector('.step-form__btn--next');
  const car = document.querySelector('.progress__car');
  const roadProgress = document.querySelector('.progress__road-line');
  const flags = document.querySelectorAll('.progress__flag');
  const progressContainer = document.querySelector('.progress');

  function updateProgress() {
    const totalSlides = swiperStepForm.slides.length - 1;
    const currentStep = swiperStepForm.realIndex;

    console.log("–¢–µ–∫—É—â–∏–π —à–∞–≥:", currentStep);

    // üîπ –î–≤–∏–≥–∞–µ–º –º–∞—à–∏–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ —Å–º–µ–Ω–æ–π —Å–ª–∞–π–¥–∞
    const roadWidth = progressContainer.offsetWidth;
    const carWidth = car.offsetWidth;
    const carPosition = (currentStep / totalSlides) * (roadWidth - carWidth);

    car.style.transition = "transform 0.4s ease-in-out";
    roadProgress.style.transition = "width 0.4s ease-in-out";

    car.style.transform = `translateX(${carPosition}px)`;
    roadProgress.style.width = `${(currentStep / totalSlides) * 100}%`;

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–∂–∫–∏
    flags.forEach((flag, index) => {
      flag.classList.toggle('progress__flag--active', index <= currentStep);
    });

    // üîπ –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
    prevButton.disabled = currentStep === 0;

    // üîπ –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
    if (currentStep === totalSlides) {
      nextButton.textContent = "Submit";
      nextButton.setAttribute("type", "submit");
      nextButton.disabled = false;
    } else {
      nextButton.textContent = "Next step";
      nextButton.setAttribute("type", "button"); // ‚õî –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ button
      nextButton.disabled = false;
    }
  }

  let isTransitioning = false;

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥"
  prevButton.addEventListener('click', () => {
    if (!isTransitioning && swiperStepForm.realIndex > 0) {
      isTransitioning = true;
      console.log("‚¨Ö –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥");
      swiperStepForm.slidePrev();
      setTimeout(() => { isTransitioning = false; }, 400);
    }
  });

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∞–ª–µ–µ"
  nextButton.addEventListener('click', () => {
    event.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã

    if (!isTransitioning) {
      const totalSlides = swiperStepForm.slides.length - 1;
      if (swiperStepForm.realIndex < totalSlides) {
        isTransitioning = true;
        console.log("–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –î–∞–ª–µ–µ");
        swiperStepForm.slideNext();
        setTimeout(() => { isTransitioning = false; }, 400);
      } else {
        alert("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      }
    }
  });

})();


/*(function () {
  const swiperStepForm = new Swiper(".step-form__container", {
    speed: 400,
    slidesPerView: 1,
    allowTouchMove: false,
    autoHeight: true,
    navigation: false,
    on: {
      slideChange: updateProgress,
    },
  });

  const prevButton = document.querySelector(".step-form__btn--prev");
  const nextButton = document.querySelector(".step-form__btn--next");
  const car = document.querySelector(".progress__car");
  const roadProgress = document.querySelector(".progress__road-line");
  const flags = document.querySelectorAll(".progress__flag");
  const progressContainer = document.querySelector(".progress");
  const warningMessage = document.querySelector(".step-form__warning");

  function updateProgress() {
    const totalSlides = swiperStepForm.slides.length - 1;
    const currentStep = swiperStepForm.realIndex;

    console.log("–¢–µ–∫—É—â–∏–π —à–∞–≥:", currentStep);

    // üîπ –î–≤–∏–≥–∞–µ–º –º–∞—à–∏–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ —Å–º–µ–Ω–æ–π —Å–ª–∞–π–¥–∞
    const roadWidth = progressContainer.offsetWidth;
    const carWidth = car.offsetWidth;
    const carPosition = (currentStep / totalSlides) * (roadWidth - carWidth);

    car.style.transition = "transform 0.4s ease-in-out";
    roadProgress.style.transition = "width 0.4s ease-in-out";

    car.style.transform = `translateX(${carPosition}px)`;
    roadProgress.style.width = `${(currentStep / totalSlides) * 100}%`;

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–∂–∫–∏
    flags.forEach((flag, index) => {
      flag.classList.toggle("progress__flag--active", index <= currentStep);
    });

    // üîπ –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
    prevButton.disabled = currentStep === 0;

    // üîπ –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
    if (currentStep === totalSlides) {
      nextButton.textContent = "Submit";
      nextButton.setAttribute("type", "submit");
      nextButton.disabled = false;
    } else {
      nextButton.textContent = "Next step";
      nextButton.setAttribute("type", "button");
      nextButton.disabled = false;
    }
  }

  let isTransitioning = false;

  // üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–û–õ–¨–ö–û –≤ —Ç–µ–∫—É—â–µ–º —Å–ª–∞–π–¥–µ
  function validateStep(currentIndex) {
    let isValid = true;
    let errorMessage = "";

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    warningMessage.textContent = "";
    document.querySelectorAll(".invalid").forEach((el) => el.classList.remove("invalid"));

    // –ë–µ—Ä–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–∏–π —Å–ª–∞–π–¥
    const currentSlide = swiperStepForm.slides[currentIndex];
    const inputs = currentSlide.querySelectorAll("input:not(.novalidate), textarea:not(.novalidate)");

    inputs.forEach((input) => {
      if (input.type === "email") {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(input.value.trim())) {
          isValid = false;
          input.classList.add("invalid");
          errorMessage = "Invalid email format";
        }
      } else if (input.type === "tel") {
        const phoneRegex = /^\+?\d{10,15}$/;
        if (!phoneRegex.test(input.value.trim())) {
          isValid = false;
          input.classList.add("invalid");
          errorMessage = "Invalid phone number format";
        }
      } else if (input.value.trim() === "") {
        isValid = false;
        input.classList.add("invalid");
        errorMessage = "Please fill in all required fields";
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–û–õ–¨–ö–û media-checkbox –í–ù–£–¢–†–ò —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–∞–π–¥–∞
    const mediaGroups = currentSlide.querySelectorAll(".media-checkbox");
    mediaGroups.forEach((group) => {
      const checkboxes = group.querySelectorAll("input[type='checkbox']");
      const isChecked = Array.from(checkboxes).some((checkbox) => checkbox.checked);

      if (!isChecked) {
        isValid = false;
        checkboxes.forEach((checkbox) => checkbox.classList.add("invalid"));
        errorMessage = "Please select at least one option";
      }
    });

    if (!isValid) {
      warningMessage.textContent = errorMessage;
    }

    return isValid;
  }

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥"
  prevButton.addEventListener("click", () => {
    if (!isTransitioning && swiperStepForm.realIndex > 0) {
      isTransitioning = true;
      console.log("‚¨Ö –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥");
      swiperStepForm.slidePrev();
      setTimeout(() => {
        isTransitioning = false;
      }, 400);
    }
  });

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∞–ª–µ–µ"
  nextButton.addEventListener("click", (event) => {
    event.preventDefault();

    if (!isTransitioning) {
      const totalSlides = swiperStepForm.slides.length - 1;
      const currentIndex = swiperStepForm.realIndex;

      if (currentIndex < totalSlides) {
        if (validateStep(currentIndex)) {
          isTransitioning = true;
          console.log("‚úî –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–ª–∞–π–¥");
          swiperStepForm.slideNext();
          setTimeout(() => {
            isTransitioning = false;
          }, 400);
        }
      } else {
        alert("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      }
    }
  });
})();
*/
